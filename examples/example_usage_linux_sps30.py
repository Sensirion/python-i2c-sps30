#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.3.3
# Product:       sps30
# Model-Version: 1.0.1
#

import argparse
import time
from sensirion_i2c_driver import LinuxI2cTransceiver, I2cConnection, CrcCalculator
from sensirion_driver_adapters.i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_sps30.device import Sps30Device
from sensirion_i2c_sps30.commands import (OutputFormat)


parser = argparse.ArgumentParser()
parser.add_argument('--i2c-port', '-p', default='/dev/i2c-1')
args = parser.parse_args()

with LinuxI2cTransceiver(args.i2c_port) as i2c_transceiver:
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x69,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    sensor = Sps30Device(channel)
    try:
        sensor.stop_measurement()
    except BaseException:
        ...
    try:
        serial_number = sensor.read_serial_number()
        print(f"serial_number: {serial_number}; "
              )
        product_type = sensor.read_product_type()
        print(f"product_type: {product_type}; "
              )
        sensor.start_measurement(OutputFormat(1280))
        time.sleep(0.1)
    except BaseException:
        ...
    for i in range(50):
        try:
            time.sleep(1.0)
            data_ready_flag = sensor.read_data_ready_flag()
            print(f"data_ready_flag: {data_ready_flag}; "
                  )
            (mc_1p0, mc_2p5, mc_4p0, mc_10p0, nc_0p5, nc_1p0, nc_2p5, nc_4p0, nc_10p0, typical_particle_size
             ) = sensor.read_measurement_values_uint16()
            print(f"mc_1p0: {mc_1p0}; "
                  f"mc_2p5: {mc_2p5}; "
                  f"mc_4p0: {mc_4p0}; "
                  f"mc_10p0: {mc_10p0}; "
                  f"nc_0p5: {nc_0p5}; "
                  f"nc_1p0: {nc_1p0}; "
                  f"nc_2p5: {nc_2p5}; "
                  f"nc_4p0: {nc_4p0}; "
                  f"nc_10p0: {nc_10p0}; "
                  f"typical_particle_size: {typical_particle_size}; "
                  )
        except BaseException:
            continue
    sensor.stop_measurement()
