#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.3.3
# Product:       sps30
# Model-Version: 1.0.0
#

import pytest
from sensirion_i2c_sps30.device import Sps30Device

from sensirion_i2c_sps30.commands import (OutputFormat)


@pytest.fixture
def sensor(channel_provider):
    channel_provider.i2c_frequency = 100e3
    channel_provider.supply_voltage = 5
    with channel_provider:
        channel = channel_provider.get_channel(slave_address=0x69,
                                               crc_parameters=(8, 0x31, 0xff, 0x0))
        yield Sps30Device(channel)


def test_start_measurement1(sensor):
    sensor.start_measurement(OutputFormat(1280))
    data_ready_flag = sensor.read_data_ready_flag()
    print(f"data_ready_flag: {data_ready_flag}; "
          )
    (mc_1p0, mc_2p5, mc_4p0, mc_10p0, nc_0p5, nc_1p0, nc_2p5, nc_4p0, nc_10p0, typical_particle_size
     ) = sensor.read_measurement_values_float()
    print(f"mc_1p0: {mc_1p0}; "
          f"mc_2p5: {mc_2p5}; "
          f"mc_4p0: {mc_4p0}; "
          f"mc_10p0: {mc_10p0}; "
          f"nc_0p5: {nc_0p5}; "
          f"nc_1p0: {nc_1p0}; "
          f"nc_2p5: {nc_2p5}; "
          f"nc_4p0: {nc_4p0}; "
          f"nc_10p0: {nc_10p0}; "
          f"typical_particle_size: {typical_particle_size}; "
          )
    (mc_1p0, mc_2p5, mc_4p0, mc_10p0, nc_0p5, nc_1p0, nc_2p5, nc_4p0, nc_10p0, typical_particle_size
     ) = sensor.read_measurement_values_uint16()
    print(f"mc_1p0: {mc_1p0}; "
          f"mc_2p5: {mc_2p5}; "
          f"mc_4p0: {mc_4p0}; "
          f"mc_10p0: {mc_10p0}; "
          f"nc_0p5: {nc_0p5}; "
          f"nc_1p0: {nc_1p0}; "
          f"nc_2p5: {nc_2p5}; "
          f"nc_4p0: {nc_4p0}; "
          f"nc_10p0: {nc_10p0}; "
          f"typical_particle_size: {typical_particle_size}; "
          )
    sensor.start_fan_cleaning()
    auto_cleaning_interval = sensor.read_auto_cleaning_interval()
    print(f"auto_cleaning_interval: {auto_cleaning_interval}; "
          )
    sensor.write_auto_cleaning_interval(604800)
    product_type = sensor.read_product_type()
    print(f"product_type: {product_type}; "
          )
    serial_number = sensor.read_serial_number()
    print(f"serial_number: {serial_number}; "
          )
    (major_version, minor_version
     ) = sensor.read_firmware_version()
    print(f"major_version: {major_version}; "
          f"minor_version: {minor_version}; "
          )
    device_status = sensor.read_device_status_register()
    print(f"device_status: {device_status}; "
          )
    sensor.clear_device_status_register()
    sensor.stop_measurement()


def test_sleep1(sensor):
    sensor.sleep()
    sensor.wake_up_sequence()


def test_read_auto_cleaning_interval1(sensor):
    auto_cleaning_interval = sensor.read_auto_cleaning_interval()
    print(f"auto_cleaning_interval: {auto_cleaning_interval}; "
          )


def test_write_auto_cleaning_interval1(sensor):
    sensor.write_auto_cleaning_interval(604800)


def test_read_product_type1(sensor):
    product_type = sensor.read_product_type()
    print(f"product_type: {product_type}; "
          )


def test_read_serial_number1(sensor):
    serial_number = sensor.read_serial_number()
    print(f"serial_number: {serial_number}; "
          )


def test_read_firmware_version1(sensor):
    (major_version, minor_version
     ) = sensor.read_firmware_version()
    print(f"major_version: {major_version}; "
          f"minor_version: {minor_version}; "
          )


def test_read_device_status_register1(sensor):
    device_status = sensor.read_device_status_register()
    print(f"device_status: {device_status}; "
          )


def test_clear_device_status_register1(sensor):
    sensor.clear_device_status_register()


def test_device_reset1(sensor):
    sensor.device_reset()

